using UnityEngine;

public class player : MonoBehaviour
{
    #region 欄位
    [Header("移動速度"), Range(0,1000)]
    public float moveSpeed = 10.5f;
    [Header("跳躍高度"),Range(0, 3000)]
    public int jumpHeight = 100;
    [Header("血量"), Range(0, 200)]
    public float HP = 100;
    [Header("是否在地板上"),Tooltip("用來儲存角色是否在地板上的資訊, 在地板上true, 反之false")]
    public bool onFloor = false;

    private AudioSource aud;
    private Rigidbody2D rig;
    private Animator ani;
    /// <summary>
    /// 玩家水平輸入數值
    /// </summary>
    private float hValue;
    #endregion

    #region 事件
    private void Start()
    {
        // GetCompoment<類型>() 泛型方法, 可以指定任何類型
        // 作用: 取得此物件的 2D 剛體元件
        rig = GetComponent<Rigidbody2D>();
    }

    private void Update()
    {
        GetPlayerInputHorizontal();
    }

    // 固定更新事件
    // 一秒固定執行 50 次, 官方建議有使用到物理 API 要在此事件內執行
    private void FixedUpdate()
    {
        Move(hValue);
    }
    #endregion
    #region 函式
    /// <summary>
    /// 取得玩家輸入水平軸向值: 左與右 A, D, 左, 右
    /// </summary>
    private void GetPlayerInputHorizontal()
    {
        // 水平值 = 輸入.取得軸向(軸向名稱)
        // 作用: 取得玩家按下水平按鍵的值, 按右為 1 , 按左為-1, 沒按為 0 
        hValue = Input.GetAxis("Horizontal");
        print("玩家水平值: " + hValue);
    }

    /// <summary>
    /// 移動
    /// </summary>
    /// <param name="horizontal">左右數值</param>
    private void Move(float horizontal)
    {
        // 區域變數: 在方法內的欄位, 有區域性, 僅限於此方法內存取
        // 簡寫: transform 此物件的 Transform 變形元件
        // posMove = 角色當前座標 + 玩家輸入的水平值
        // Time.fixedDeltaTime 指 1/50 秒
        Vector2 posMove = transform.position + new Vector3(horizontal, 0, 0) * moveSpeed * Time.fixedDeltaTime;
        // 剛體.移動座標(要前往的座標);
        rig.MovePosition(posMove);
    }
    /// <summary>
    /// 跳躍
    /// </summary>
    private void Jump()
    {

    }
    /// <summary>
    /// 攻擊
    /// </summary>
    private void Attack()
    {

    }
    /// <summary>
    /// 受傷
    /// </summary>
    /// <param name="damage">造成的傷害</param>
    public void Hurt(float damage)
    {

    }
    /// <summary>
    /// 死亡
    /// </summary>
    private void Dead()
    {

    }
    /// <summary>
    /// 撿道具
    /// </summary>
    /// <param name="propName">道具名稱</param>
    private void EatProp(string propName)
    {

    }
    #endregion
}
